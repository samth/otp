#lang scribble/manual

@(require
  racket/format
  (for-label racket otp crypto))

@(define ietf-url "https://tools.ietf.org/html")
@(define hotp-rfc-link (link (~a ietf-url "/rfc4226") "RFC 4226"))
@(define totp-rfc-link (link (~a ietf-url "/rfc6238") "RFC 6238"))

@title{One-time passwords}

@defmodule[otp]

This module is an implementation of the one-time passwords defined in
@hotp-rfc-link and @|totp-rfc-link|. It reuses the cryptographic primitives exposed
in the @racketmodname[crypto] module.

@section{HOTP}

Defined in @|hotp-rfc-link|, HOTP (HMAC-based One-Time Password) uses a
hashing algorithm such as SHA1 and a secret key to sign a @italic{moving
factor} — generating a one-time password.

The moving factor is provided by the user; it can be a counter or
any value which is guaranteed to change each time a password
is generated.

@defproc[(generate-hotp [secret bytes?]
                        [moving-factor exact-integer?]
			[#:mode mode
			(or/c digest-spec? digest-impl?) 'sha1]
			[#:digits digits (between/c 4 10) 6]
			[#:checksum? boolean? #f]
			[#:truncation-offset truncation-offset (or/c #f (</c 16)) #f])
	 string?]{
  Generates a HOTP (HMAC-based One-Time Password) using the
  @racket[mode] as the hashing algorithm and @racket[secret] as
  the key.

  The password is guaranteed to be a @racket[string?] with a @racket[string-length] of
  @racket[digits] and characters between @racket[0] and @racket[9].

  When @racket[checksum?] is set, the password will have an extra
  checksum digit calculated using the Luhn algorithm.

  The @racket[truncation-offset] controls which part of the generated
  hash will be used for the password — in the case that it’s not set,
  it defaults to the automatic selection defined in the RFC.
}
